openapi: 3.1.0
info:
  title: API Router
  version: 0.1.0
  description: |
    API Router is a lightweight reverse proxy that normalises upstream AI providers
    into OpenAI-compatible endpoints. The service performs request signing, model
    remapping, rate limiting, telemetry collection, and streaming fan-out while
    keeping the wire protocol identical to OpenAI's public API.
servers:
  - url: http://localhost:8000
    description: Default local deployment
  - url: https://api-router.example.com
    description: Example production deployment
tags:
  - name: Operations
    description: Health checks and metrics used for operations
  - name: Models
    description: Read endpoints that expose available models
  - name: Completions
    description: OpenAI-compatible JSON completion endpoints
  - name: Audio
    description: Audio transcription and translation endpoints
  - name: Anthropic
    description: Anthropic Messages API compatibility layer
paths:
  /health:
    get:
      summary: Service healthcheck
      description: |
        Returns a lightweight status payload as well as rate limiter statistics.
        The endpoint is unauthenticated and is designed to be scraped by load balancers
        or Kubernetes probes.
      tags: [Operations]
      security: []
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              examples:
                default:
                  summary: Typical health payload
                  value:
                    status: ok
                    message: Light API Router running
                    rateLimiter:
                      activeBuckets: 4
                      routes:
                        /v1/chat/completions: 2
                        /v1/messages: 2
  /metrics:
    get:
      summary: Prometheus metrics endpoint
      description: |
        Exposes process, proxy, and rate limiting statistics in Prometheus text format.
        The payload can be scraped by Prometheus or any compatible collector.
      tags: [Operations]
      security: []
      responses:
        '200':
          description: Metrics payload in Prometheus exposition format
          content:
            'text/plain; version=0.0.4':
              schema:
                type: string
                description: Prometheus exposition format
              example: |
                # HELP requests_total Total number of requests received
                # TYPE requests_total counter
                requests_total{route="/v1/chat/completions",method="POST",status="200"} 42
                requests_total{route="/health",method="GET",status="200"} 128
        '500':
          description: Metrics collector failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/models:
    get:
      summary: List available models
      description: |
        Returns a static set of models configured for the currently selected transformer.
      tags: [Models]
      security:
        - BearerAuth: []
        - {}
      responses:
        '200':
          description: List of models available to the client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelListResponse'
        '401':
          description: Missing or invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/chat/completions:
    post:
      summary: Create chat completion
      tags: [Completions]
      description: |
        Forwards OpenAI-compatible chat completion requests to the configured provider.
        Streaming is supported when the `stream` flag is true and the `Accept: text/event-stream`
        header is present.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
            examples:
              basic:
                summary: Basic chat completion invocation
                value:
                  model: gpt-4o-mini
                  messages:
                    - role: user
                      content: 讲一个 Rust 的笑话
                  max_tokens: 256
                  temperature: 0.7
                  stream: false
      responses:
        '200':
          description: Chat completion queued successfully or streaming started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ChatCompletionStream'
              examples:
                stream:
                  summary: Streaming delta payload
                  value: |
                    data: {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1700000000,"model":"gpt-4o-mini","choices":[{"index":0,"delta":{"role":"assistant","content":"你好"},"finish_reason":null}]}

                    data: {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1700000001,"model":"gpt-4o-mini","choices":[{"index":0,"delta":{"content":"！"},"finish_reason":null}]}

                    data: [DONE]
        '400':
          description: Malformed request payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          headers:
            Retry-After:
              $ref: '#/components/headers/RetryAfter'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Upstream provider returned an error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/completions:
    post:
      summary: Create text completion
      tags: [Completions]
      security:
        - BearerAuth: []
      description: |
        Proxy for OpenAI compatible text completions. Supports both blocking and streamed
        responses depending on the `stream` flag.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionRequest'
      responses:
        '200':
          description: Completion response or stream started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletionResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/CompletionStream'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          headers:
            Retry-After:
              $ref: '#/components/headers/RetryAfter'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Upstream error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/embeddings:
    post:
      summary: Create embeddings
      tags: [Completions]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddingRequest'
      responses:
        '200':
          description: Embedding vector response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingResponse'
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          headers:
            Retry-After:
              $ref: '#/components/headers/RetryAfter'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Upstream error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/audio/transcriptions:
    post:
      summary: Create audio transcription
      tags: [Audio]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            encoding:
              file:
                contentType: audio/*
            schema:
              $ref: '#/components/schemas/AudioTranscriptionMultipart'
      responses:
        '200':
          description: Transcription completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioTranscriptionResponse'
        '400':
          description: Invalid multipart payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          headers:
            Retry-After:
              $ref: '#/components/headers/RetryAfter'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Upstream error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/audio/translations:
    post:
      summary: Create audio translation
      tags: [Audio]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            encoding:
              file:
                contentType: audio/*
            schema:
              $ref: '#/components/schemas/AudioTranslationMultipart'
      responses:
        '200':
          description: Audio translation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioTranslationResponse'
        '400':
          description: Invalid multipart payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          headers:
            Retry-After:
              $ref: '#/components/headers/RetryAfter'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Upstream error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/messages:
    post:
      summary: Create Anthropic message completion
      tags: [Anthropic]
      description: |
        Proxies Anthropic Messages API requests. When `stream` is true and the client
        requests `text/event-stream`, the connection is upgraded for streaming responses.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AnthropicVersion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnthropicMessagesRequest'
      responses:
        '200':
          description: Anthropic response received or stream opened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnthropicMessagesResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/AnthropicStream'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          headers:
            Retry-After:
              $ref: '#/components/headers/RetryAfter'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Upstream error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: API Key
      description: |
        Supply the upstream API key via the `Authorization: Bearer <token>` header. If no
        header is provided, the server falls back to `DEFAULT_API_KEY` when available.
  parameters:
    AnthropicVersion:
      name: anthropic-version
      in: header
      required: false
      schema:
        type: string
      description: |
        Anthropic API version header. When omitted, the value defined in the transformer
        configuration (e.g. `transformer/anthropic.json`) is used.
  headers:
    RetryAfter:
      description: Seconds until the next request will be accepted.
      schema:
        type: string
        pattern: '^[0-9]+$'
  schemas:
    ErrorResponse:
      type: object
      required: [error]
      properties:
        error:
          type: object
          required: [message]
          properties:
            message:
              type: string
              description: Human-readable explanation of the failure.
    HealthResponse:
      type: object
      required: [status, message, rateLimiter]
      properties:
        status:
          type: string
          example: ok
        message:
          type: string
        rateLimiter:
          type: object
          required: [activeBuckets, routes]
          properties:
            activeBuckets:
              type: integer
              minimum: 0
              description: Total number of active token buckets.
            routes:
              type: object
              additionalProperties:
                type: integer
                minimum: 0
              description: Active token bucket count per route.
    ModelListResponse:
      type: object
      required: [object, data]
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/ModelSummary'
    ModelSummary:
      type: object
      required: [id, object, created, owned_by]
      properties:
        id:
          type: string
        object:
          type: string
          example: model
        created:
          type: integer
          format: int64
        owned_by:
          type: string
    ChatCompletionRequest:
      type: object
      required: [model, messages]
      properties:
        model:
          type: string
          description: Logical model name exposed to clients.
        messages:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ChatMessage'
        temperature:
          type: number
          format: float
          minimum: 0
          maximum: 2
        stream:
          type: boolean
          description: When true, response is streamed using SSE.
        max_tokens:
          type: integer
          minimum: 1
    ChatMessage:
      type: object
      required: [role, content]
      properties:
        role:
          type: string
          enum: [system, user, assistant, tool]
        content:
          type: string
    ChatCompletionResponse:
      type: object
      required: [id, object, created, model, choices]
      properties:
        id:
          type: string
        object:
          type: string
          example: chat.completion
        created:
          type: integer
          format: int64
        model:
          type: string
        choices:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionChoice'
        usage:
          $ref: '#/components/schemas/Usage'
    ChatCompletionChoice:
      type: object
      required: [index, message]
      properties:
        index:
          type: integer
        message:
          $ref: '#/components/schemas/ChatMessage'
        finish_reason:
          type: string
    ChatCompletionStream:
      type: string
      description: |
        Server-sent events stream that relays upstream delta messages. Each event is
        prefixed with `data:` and terminated by a blank line. The final event is `data: [DONE]`.
    CompletionRequest:
      type: object
      required: [model, prompt]
      properties:
        model:
          type: string
        prompt:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        suffix:
          type: string
        max_tokens:
          type: integer
        temperature:
          type: number
        top_p:
          type: number
        n:
          type: integer
        stream:
          type: boolean
        logprobs:
          type: integer
        echo:
          type: boolean
        stop:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        presence_penalty:
          type: number
        frequency_penalty:
          type: number
        best_of:
          type: integer
        user:
          type: string
    CompletionResponse:
      type: object
      required: [id, object, created, model, choices]
      properties:
        id:
          type: string
        object:
          type: string
          example: text_completion
        created:
          type: integer
          format: int64
        model:
          type: string
        choices:
          type: array
          items:
            $ref: '#/components/schemas/CompletionChoice'
        usage:
          $ref: '#/components/schemas/Usage'
    CompletionChoice:
      type: object
      required: [index, text]
      properties:
        index:
          type: integer
        text:
          type: string
        logprobs:
          type: object
          additionalProperties: {}
        finish_reason:
          type: string
    CompletionStream:
      type: string
      description: SSE payload mirroring OpenAI's text completion delta events.
    Usage:
      type: object
      required: [prompt_tokens, completion_tokens, total_tokens]
      properties:
        prompt_tokens:
          type: integer
        completion_tokens:
          type: integer
        total_tokens:
          type: integer
    EmbeddingRequest:
      type: object
      required: [model, input]
      properties:
        model:
          type: string
        input:
          description: Input text(s) to embed
          oneOf:
            - type: string
            - type: array
              items:
                oneOf:
                  - type: string
                  - type: array
                    items:
                      type: integer
        user:
          type: string
        encoding_format:
          type: string
        dimensions:
          type: integer
    EmbeddingResponse:
      type: object
      required: [object, data]
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/EmbeddingData'
        model:
          type: string
        usage:
          $ref: '#/components/schemas/Usage'
    EmbeddingData:
      type: object
      required: [object, embedding, index]
      properties:
        object:
          type: string
          example: embedding
        embedding:
          type: array
          items:
            type: number
        index:
          type: integer
    AudioTranscriptionMultipart:
      type: object
      required: [file, model]
      properties:
        file:
          type: string
          format: binary
          description: Audio file to transcribe.
        model:
          type: string
        prompt:
          type: string
        response_format:
          type: string
        temperature:
          type: number
        language:
          type: string
    AudioTranscriptionResponse:
      type: object
      required: [text]
      properties:
        text:
          type: string
        language:
          type: string
        duration:
          type: number
        segments:
          description: Provider specific segment metadata
          oneOf:
            - type: object
            - type: array
              items:
                type: object
    AudioTranslationMultipart:
      type: object
      required: [file, model]
      properties:
        file:
          type: string
          format: binary
        model:
          type: string
        prompt:
          type: string
        response_format:
          type: string
        temperature:
          type: number
    AudioTranslationResponse:
      $ref: '#/components/schemas/AudioTranscriptionResponse'
    AnthropicMessagesRequest:
      type: object
      required: [model, max_tokens, messages]
      properties:
        model:
          type: string
        max_tokens:
          type: integer
        messages:
          type: array
          items:
            $ref: '#/components/schemas/AnthropicMessage'
        system:
          type: string
        temperature:
          type: number
        top_p:
          type: number
        top_k:
          type: integer
        stream:
          type: boolean
        stop_sequences:
          type: array
          items:
            type: string
    AnthropicMessage:
      type: object
      required: [role, content]
      properties:
        role:
          type: string
          enum: [user, assistant]
        content:
          type: string
    AnthropicMessagesResponse:
      type: object
      required: [id, type, role, content, model, usage]
      properties:
        id:
          type: string
        type:
          type: string
          description: Mirrors Anthropic's `type` field.
        role:
          type: string
        content:
          type: array
          items:
            $ref: '#/components/schemas/AnthropicContentBlock'
        model:
          type: string
        stop_reason:
          type: string
        stop_sequence:
          type: string
        usage:
          $ref: '#/components/schemas/AnthropicUsage'
    AnthropicContentBlock:
      type: object
      required: [type, text]
      properties:
        type:
          type: string
          example: text
        text:
          type: string
    AnthropicUsage:
      type: object
      required: [input_tokens, output_tokens]
      properties:
        input_tokens:
          type: integer
        output_tokens:
          type: integer
    AnthropicStream:
      type: string
      description: Server-sent events stream relaying Anthropic delta messages.
